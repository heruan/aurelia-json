{"version":3,"sources":["../../src/main/json-encoder.ts"],"names":[],"mappings":"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","file":"json-encoder.js","sourcesContent":["import * as metadataKeys from \"./metadata-keys\";\n\nexport class JsonEncoder {\n\n    public static START_OBJECT: string = \"{\";\n\n    public static END_OBJECT: string = \"}\";\n\n    public static START_ARRAY: string = \"[\";\n\n    public static END_ARRAY: string = \"]\";\n\n    public static START_STRING: string = '\"';\n\n    public static END_STRING: string = '\"';\n\n    public static VALUE_NULL: string = \"null\";\n\n    public static VALUE_TRUE: string = \"true\";\n\n    public static VALUE_FALSE: string = \"false\";\n\n    public static DEFINITION: string = \":\";\n\n    public static SEPARATOR: string = \",\";\n\n    private serializers: Map<any, (value: any) => string> = new Map<any, (value: any) => string>();\n\n    public encode(value: any, ignore: string[] = []): string {\n        if (value === null) {\n            return JsonEncoder.VALUE_NULL;\n        } else if (typeof value === \"boolean\") {\n            return value ? JsonEncoder.VALUE_TRUE : JsonEncoder.VALUE_FALSE;\n        } else if (typeof value === \"number\") {\n            return value.toString();\n        } else if (typeof value === \"string\") {\n            return JsonEncoder.START_STRING + value + JsonEncoder.END_STRING;\n        } else if (typeof value[\"toJSON\"] === \"function\") {\n            return this.encode(value.toJSON(), ignore);\n        } else if (typeof value[Symbol.iterator] === \"function\") {\n            let json = JsonEncoder.START_ARRAY;\n            json += Array.from(value, item => this.encode(item, ignore)).join(JsonEncoder.SEPARATOR);\n            json += JsonEncoder.END_ARRAY;\n            return json;\n        } else {\n            let prototype = Object.getPrototypeOf(value);\n            let serializer = this.serializers.get(value.constructor);\n            if (serializer) {\n                return serializer(value);\n            }\n            let json = JsonEncoder.START_OBJECT;\n            let properties: { key: string, value: any, ignore: string[] }[] = [];\n            for (let key in value) {\n                let jsonIgnore: string[] = Reflect.getMetadata(metadataKeys.jsonIgnore, prototype, key);\n                if (ignore.indexOf(key) < 0) {\n                    properties.push({ key, value: value[key], ignore: jsonIgnore || [] });\n                }\n            }\n            json += properties.map(property =>\n                JsonEncoder.START_STRING + property.key + JsonEncoder.END_STRING +\n                JsonEncoder.DEFINITION + this.encode(property.value, property.ignore)\n            ).join(JsonEncoder.SEPARATOR) + JsonEncoder.END_OBJECT;\n            return json;\n        }\n    }\n\n    public withSerializer<T>(type: new(...args: any[]) => T, serializer: (value: T) => string): JsonEncoder {\n        this.serializers.set(type, serializer);\n        return this;\n    }\n\n}\n"]}