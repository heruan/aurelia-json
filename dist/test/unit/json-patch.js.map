{"version":3,"sources":["../../src/test/unit/json-patch.ts"],"names":[],"mappings":"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","file":"json-patch.js","sourcesContent":["import { TypeBinder, bind, generics, track, trackIterable } from \"type-binder\";\nimport { JsonPatch } from \"../../main/json-patch\";\nimport { JsonEncoder } from \"../../main/json-encoder\";\n\ndescribe(\"json-patch\", () => {\n\n    class Foo {\n        @track() a: number;\n        b: number;\n        @bind(Bar) @track() bar: Bar;\n    }\n\n    class Bar {\n        @track() c: number;\n    }\n\n    it(\"produces valid patch\", () => {\n        let bar = new TypeBinder().bind({ c: 3 }, Bar);\n        let foo = new TypeBinder().bind({ a: 1, b: 1, bar }, Foo);\n        let patch = JsonPatch.diff(foo);\n        expect(patch.length).toBe(0);\n        foo.a = 2;\n        foo.b = 2;\n        patch = JsonPatch.diff(foo);\n        expect(patch.toJSON()).toEqual([\n            { op: 'test', path: '/a', value: 1 },\n            { op: 'replace', path: '/a', value: 2 }\n        ]);\n        foo.bar.c = 4;\n        patch = JsonPatch.diff(foo);\n        expect(patch.toJSON()).toEqual([\n            { op: 'test', path: '/a', value: 1 },\n            { op: 'replace', path: '/a', value: 2 },\n            { op: 'test', path: '/bar/c', value: 3 },\n            { op: 'replace', path: '/bar/c', value: 4 }\n        ]);\n        foo.bar = new Bar();\n        patch = JsonPatch.diff(foo, { a: true, bar: true });\n        expect(patch.toJSON()).toEqual([\n            { op: 'test', path: '/a', value: 1 },\n            { op: 'replace', path: '/a', value: 2 },\n            { op: 'test', path: '/bar', value: bar },\n            { op: 'replace', path: '/bar', value: foo.bar }\n        ]);\n    });\n\n    it(\"produces valid patch for iterables\", () => {\n        class Bag {\n            @bind(Array)\n            @trackIterable()\n            numbers: number[];\n\n            @bind(Set)\n            @generics(Bar)\n            @trackIterable()\n            bars: Set<Bar>;\n\n            @bind(Map)\n            @generics(Foo, Bar)\n            @trackIterable<[Foo, Bar], Map<Foo, Bar>>((v1, v2) => v1.every((v, i) => v === v2[i]))\n            foobars: Map<Foo, Bar>;\n        }\n\n        let bag = new TypeBinder().bind({\n            numbers: [ 1, 2, 3 ],\n            bars: [ { c: 1 }, { c: 2 }, { c: 3 }],\n            foobars: [\n                [ { a: 1 }, { c: 1 } ],\n                [ { a: 2 }, { c: 2 } ],\n                [ { a: 3 }, { c: 3 } ]\n            ]\n        }, Bag);\n        bag.numbers = [ 2, 3, 1 ];\n        let foo = bag.foobars.keys().next().value;\n        let bar = new Bar();\n        bar.c = 4;\n        bag.foobars.set(foo, bar);\n        let patch = JsonPatch.diff(bag);\n        expect(new JsonEncoder().encode(patch)).toBe(\n            '[{\"op\":\"test\",\"path\":\"/numbers/0\",\"value\":1},' +\n            '{\"op\":\"move\",\"from\":\"/numbers/0\",\"path\":\"/numbers/2\"},' +\n            '{\"op\":\"test\",\"path\":\"/foobars/0\",\"value\":[{\"a\":1},{\"c\":1}]},' +\n            '{\"op\":\"replace\",\"path\":\"/foobars/0\",\"value\":[{\"a\":1},{\"c\":4}]}]'\n        );\n    });\n\n});\n"]}