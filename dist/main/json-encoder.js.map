{"version":3,"sources":["../../src/main/json-encoder.ts"],"names":[],"mappings":"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","file":"json-encoder.js","sourcesContent":["import * as metadataKeys from \"./metadata-keys\";\n\nexport class JsonEncoder {\n\n    public static START_OBJECT: string = \"{\";\n\n    public static END_OBJECT: string = \"}\";\n\n    public static START_ARRAY: string = \"[\";\n\n    public static END_ARRAY: string = \"]\";\n\n    public static START_STRING: string = '\"';\n\n    public static END_STRING: string = '\"';\n\n    public static VALUE_NULL: string = \"null\";\n\n    public static VALUE_TRUE: string = \"true\";\n\n    public static VALUE_FALSE: string = \"false\";\n\n    public static DEFINITION: string = \":\";\n\n    public static SEPARATOR: string = \",\";\n\n    private serializers: Map<any, (value: any) => string> = new Map<any, (value: any) => string>();\n\n    public encode(value: any, ignore: string[] = []): string {\n        if (value === null || value === undefined) {\n            return JsonEncoder.VALUE_NULL;\n        }\n        let prototype = Object.getPrototypeOf(value);\n        if (typeof value === \"boolean\") {\n            return value ? JsonEncoder.VALUE_TRUE : JsonEncoder.VALUE_FALSE;\n        } else if (typeof value === \"number\") {\n            return value.toString();\n        } else if (typeof value === \"string\") {\n            return JsonEncoder.START_STRING + value + JsonEncoder.END_STRING;\n        } else if (typeof value[\"toJSON\"] === \"function\") {\n            return this.encode(value.toJSON(), ignore);\n        } else if (typeof value[Symbol.iterator] === \"function\") {\n            let json = JsonEncoder.START_ARRAY;\n            json += Array.from(value, item => this.encode(item, ignore)).join(JsonEncoder.SEPARATOR);\n            json += JsonEncoder.END_ARRAY;\n            return json;\n        } else if (this.serializers.has(value.constructor)) {\n            return this.serializers.get(value.constructor)(value);\n        } else {\n            let json = JsonEncoder.START_OBJECT;\n            let properties: { key: string, value: any, ignore: string[] }[] = [];\n            for (let key of Object.keys(value)) {\n                let jsonIgnore: string[] = Reflect.getMetadata(metadataKeys.jsonIgnore, prototype, key);\n                if (ignore.indexOf(key) < 0) {\n                    properties.push({ key, value: value[key], ignore: jsonIgnore || [] });\n                }\n            }\n            json += properties.map(property => {\n                let key = JsonEncoder.START_STRING + property.key + JsonEncoder.END_STRING;\n                let value;\n                if (property.value === null || property.value === undefined) {\n                    value = JsonEncoder.VALUE_NULL;\n                } else if (Reflect.hasMetadata(metadataKeys.serializer, prototype, property.key)) {\n                    let serializer = Reflect.getMetadata(metadataKeys.serializer, prototype, property.key);\n                    value = this.encode(serializer(property.value));\n                } else {\n                    value = this.encode(property.value, property.ignore);\n                }\n                return key + JsonEncoder.DEFINITION + value;\n            }).join(JsonEncoder.SEPARATOR) + JsonEncoder.END_OBJECT;\n            return json;\n        }\n    }\n\n    public withSerializer<T>(serializer: (value: T) => string, ...types: (new(...args: any[]) => T)[]): JsonEncoder {\n        types.forEach(type => this.serializers.set(type, serializer));\n        return this;\n    }\n\n}\n"]}