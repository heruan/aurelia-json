{"version":3,"sources":["../../src/main/json-patch.ts"],"names":[],"mappings":"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","file":"json-patch.js","sourcesContent":["import { binderPropertyTrackValue, binderPropertyEntriesValue, binderPropertyTrackCompare, binderPropertyEntries, binderPropertyEntriesCompare } from \"type-binder\";\nimport * as metadataKeys from \"./metadata-keys\";\n\nexport class JsonPatch {\n\n    private operations: Object[];\n\n    public constructor(operations = []) {\n        this.operations = operations;\n    }\n\n    get length() {\n        return this.operations.length;\n    }\n\n    public add<T>(path: string, value: T): JsonPatch {\n        this.operations.push({\n            \"op\": \"add\",\n            path,\n            value\n        });\n        return this;\n    }\n\n    public remove(path: string): JsonPatch {\n        this.operations.push({\n            \"op\": \"remove\",\n            path\n        });\n        return this;\n    }\n\n    public replace<T>(path: string, value: T, serializer?: (value: T) => any): JsonPatch {\n        let op = {\n            \"op\": \"replace\",\n            path,\n            value\n        };\n        Reflect.defineMetadata(metadataKeys.serializer, serializer, op, \"value\");\n        this.operations.push(op);\n        return this;\n    }\n\n    public copy(fromPath: string, toPath: string): JsonPatch {\n        this.operations.push({\n            \"op\": \"copy\",\n            \"from\": fromPath,\n            \"path\": toPath\n        });\n        return this;\n    }\n\n    public move(fromPath: string, toPath: string): JsonPatch {\n        this.operations.push({\n            \"op\": \"move\",\n            \"from\": fromPath,\n            \"path\": toPath\n        });\n        return this;\n    }\n\n    public test<T>(path: string, value: T): JsonPatch {\n        this.operations.push({\n            \"op\": \"test\",\n            path,\n            value\n        });\n        return this;\n    }\n\n    public reset(): JsonPatch {\n        this.operations = [];\n        return this;\n    }\n\n    public getArray(): any[] {\n        return this.operations;\n    }\n\n    public toJSON(): any {\n        return this.getArray();\n    }\n\n    public static diff<T>(target: T, properties: string[] = Object.keys(target), patch: JsonPatch = new JsonPatch(), prefix?: string, separator: string = \"/\", wildcard: string = \"-\"): JsonPatch {\n        for (let key of properties) {\n            let currentValue = target[key];\n            if (Reflect.hasMetadata(binderPropertyTrackValue, target, key)) {\n                let comparingCallback: (v1, v2) => boolean = Reflect.getMetadata(binderPropertyTrackCompare, target, key);\n                let originalValue = Reflect.getMetadata(binderPropertyTrackValue, target, key);\n                if (!comparingCallback(currentValue, originalValue)) {\n                    let pointer = [prefix, key].join(separator);\n                    // patch.test(pointer, originalValue);\n                    patch.replace([prefix, key].join(separator), currentValue);\n                } else if (currentValue !== null && typeof currentValue === \"object\") {\n                    JsonPatch.diff(currentValue, Object.keys(currentValue), patch, [prefix, key].join(separator), separator, wildcard);\n                }\n            } else if (currentValue !== null && Reflect.hasMetadata(binderPropertyEntriesValue, target, key)) {\n                let trackingCallback: <I extends Iterable<V>, V>(iterable: I) => V[] = Reflect.getMetadata(binderPropertyEntries, target, key);\n                let comparingCallback: (v1, v2) => boolean = Reflect.getMetadata(binderPropertyEntriesCompare, target, key);\n                let originalEntries = <any[]> Reflect.getMetadata(binderPropertyEntriesValue, target, key);\n                let currentEntries = trackingCallback(currentValue);\n                originalEntries.forEach((value, index) => {\n                    let pointer = [prefix, key, index].join(separator);\n                    if (index >= currentEntries.length) {\n                        // patch.test(pointer, value);\n                        patch.remove(pointer);\n                    } else if (!comparingCallback(value, currentEntries[index])) {\n                        // patch.test(pointer, value);\n                        patch.replace(pointer, currentEntries[index], Reflect.getMetadata(metadataKeys.serializer, target, key));\n                    } else if (value !== null && typeof value === \"object\") {\n                        JsonPatch.diff(value, Object.keys(value), patch, pointer, separator, wildcard);\n                    }\n                });\n                if (currentEntries.length > originalEntries.length) {\n                    let path = [prefix, key, wildcard].join(separator);\n                    currentEntries.slice(originalEntries.length).forEach(value => patch.add(path, value));\n                }\n            }\n        }\n        return patch;\n    }\n\n}\n"]}