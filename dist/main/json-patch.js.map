{"version":3,"sources":["../../src/main/json-patch.ts"],"names":[],"mappings":"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","file":"json-patch.js","sourcesContent":["import { binderPropertyTrackValue, binderPropertyEntriesValue, binderPropertyTrackCompare, binderPropertyEntriesCompare } from \"type-binder\";\n\nexport class JsonPatch {\n\n    private operations: Object[];\n\n    public constructor(operations = []) {\n        this.operations = operations;\n    }\n\n    get length() {\n        return this.operations.length;\n    }\n\n    public add(path: string, value: any): JsonPatch {\n        this.operations.push({\n            \"op\": \"add\",\n            path,\n            value\n        });\n        return this;\n    }\n\n    public remove(path: string): JsonPatch {\n        this.operations.push({\n            \"op\": \"remove\",\n            path\n        });\n        return this;\n    }\n\n    public replace(path: string, value: any): JsonPatch {\n        this.operations.push({\n            \"op\": \"replace\",\n            path,\n            value\n        });\n        return this;\n    }\n\n    public copy(fromPath: string, toPath: string): JsonPatch {\n        this.operations.push({\n            \"op\": \"copy\",\n            \"from\": fromPath,\n            \"path\": toPath\n        });\n        return this;\n    }\n\n    public move(fromPath: string, toPath: string): JsonPatch {\n        this.operations.push({\n            \"op\": \"move\",\n            \"from\": fromPath,\n            \"path\": toPath\n        });\n        return this;\n    }\n\n    public test(path: string, value: any): JsonPatch {\n        this.operations.push({\n            \"op\": \"test\",\n            path,\n            value\n        });\n        return this;\n    }\n\n    public reset(): JsonPatch {\n        this.operations = [];\n        return this;\n    }\n\n    public getArray(): any[] {\n        return this.operations;\n    }\n\n    public toJSON(): any {\n        return this.getArray();\n    }\n\n    public static diff<T>(target: T, properties: Object = target, patch: JsonPatch = new JsonPatch(), prefix?: string, separator: string = \"/\", wildcard: string = \"-\"): JsonPatch {\n        for (let key in properties) {\n            let include = properties[key];\n            if (include) {\n                let currentValue = target[key];\n                if (Reflect.hasMetadata(binderPropertyTrackValue, target, key)) {\n                    let comparingCallback: (v1, v2) => boolean = Reflect.getMetadata(binderPropertyTrackCompare, target, key);\n                    let originalValue = Reflect.getMetadata(binderPropertyTrackValue, target, key);\n                    if (!comparingCallback(currentValue, originalValue)) {\n                        let pointer = [prefix, key].join(separator);\n                        patch.test(pointer, originalValue);\n                        patch.replace([prefix, key].join(separator), currentValue);\n                    } else if (currentValue !== null && typeof currentValue === \"object\") {\n                        JsonPatch.diff(currentValue, include, patch, [prefix, key].join(separator), separator, wildcard);\n                    }\n                } else if (currentValue !== null && Reflect.hasMetadata(binderPropertyEntriesValue, target, key)) {\n                    let comparingCallback: (v1, v2) => boolean = Reflect.getMetadata(binderPropertyEntriesCompare, target, key);\n                    let originalEntries = <any[]> Reflect.getMetadata(binderPropertyEntriesValue, target, key);\n                    let originalLength = originalEntries.length;\n                    let originalTrack = originalEntries.slice();\n                    let currentEntries = Array.from(currentValue);\n                    let currentLength = currentEntries.length;\n                    let addEntries = currentEntries.slice();\n                    originalEntries.forEach(value => {\n                        let index = originalTrack.indexOf(value);\n                        let found = currentEntries.findIndex(item => comparingCallback(value, item));\n                        let from = [prefix, key, index].join(separator);\n                        if (found >= 0) {\n                            let pointer = [prefix, key, found].join(separator);\n                            if (found !== index) {\n                                patch.test(from, value);\n                                patch.move(from, pointer);\n                                originalTrack.splice(index, 1);\n                                originalTrack[found] = value;\n                            }\n                            addEntries.splice(addEntries.indexOf(currentEntries[found]), 1);\n                        } else if (index < currentLength) {\n                            patch.test(from, value);\n                            patch.replace(from, currentEntries[index]);\n                            originalTrack[index] = currentEntries[index];\n                            addEntries.splice(addEntries.indexOf(currentEntries[index]), 1);\n                        } else {\n                            patch.test(from, value);\n                            patch.remove(from);\n                            originalTrack.splice(index, 1);\n                        }\n                    });\n                    if (addEntries.length > 0) {\n                        let path = [prefix, key, wildcard].join(separator);\n                        addEntries.forEach(value => patch.add(path, value));\n                    }\n                }\n            }\n        }\n        return patch;\n    }\n\n}\n"]}