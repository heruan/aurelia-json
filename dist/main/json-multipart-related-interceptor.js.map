{"version":3,"sources":["../../src/main/json-multipart-related-interceptor.ts"],"names":[],"mappings":";;AACA,yDAAsF;AACtF,+CAA6C;AAE7C;IAII,yCAAmB,WAAkE;QAAlE,4BAAA,EAAA,cAA2B,gCAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC;QACjF,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAEM,iDAAO,GAAd,UAAe,OAA2B;QACtC,IAAI,gBAAgB,GAAG,IAAI,qCAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9D,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,OAAO,GAAG,IAAI,0BAAW,EAAE,CAAC,cAAc,CAAO,UAAA,IAAI;YACrD,gBAAgB,CAAC,OAAO,CAAC,IAAI,yBAAI,CAAC,IAAI,EAAE,gCAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YAChG,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC7B,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACf,gBAAgB,CAAC,WAAW,CAAC,IAAI,yBAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;QAC/F,IAAI,OAAO,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC;QACxC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;QAC1B,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAW,CAAC,YAAY,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5D,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEL,sCAAC;AAAD,CAtBA,AAsBC,IAAA;AAtBY,0EAA+B","file":"json-multipart-related-interceptor.js","sourcesContent":["import { Interceptor, HttpRequestMessage, HttpResponseMessage } from \"aurelia-http-client\";\nimport { MultipartRelated, Part, ContentType, HttpHeaders } from \"aurelia-http-utils\";\nimport { JsonEncoder } from \"./json-encoder\";\n\nexport class JsonMultipartRelatedInterceptor implements Interceptor {\n\n    private contentType: ContentType;\n\n    public constructor(contentType: ContentType = ContentType.valueOf(\"application/json\")) {\n        this.contentType = contentType;\n    }\n\n    public request(message: HttpRequestMessage): HttpRequestMessage {\n        let multipartRelated = new MultipartRelated(this.contentType);\n        let partId = 0;\n        let encoder = new JsonEncoder().withSerializer<Blob>(blob => {\n            multipartRelated.addPart(new Part(blob, ContentType.valueOf(blob.type)), (++partId).toString());\n            return partId.toString();\n        }, Blob, File);\n        multipartRelated.addRootPart(new Part(encoder.encode(message.content), this.contentType), \"/\");\n        let content = multipartRelated.toBlob();\n        message.content = content;\n        message.headers.add(HttpHeaders.CONTENT_TYPE, content.type);\n        return message;\n    }\n\n}\n"]}